{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","mailTo","className","href","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","App","useState","currentTodos","setCurrentTodos","currentUser","setCurrentUser","selectedError","setSelectedUser","todoTitle","setTodoTitle","hasTitleError","setHasTitleError","action","method","onSubmit","event","newTodo","preventDefault","Math","max","curentTodos","type","value","placeholder","onChange","target","onBlur","disabled","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.437ff35a.chunk.js","sourcesContent":["import React from 'react';\n\ntype InfoProps = {\n  user: {\n    id: number,\n    name: string,\n    username: string,\n    email: string,\n  },\n};\n\nexport const UserInfo: React.FC<InfoProps> = ({ user }) => {\n  const { name, email } = user;\n  const mailTo = `mailto:${email}`;\n\n  return (\n    <a className=\"UserInfo\" href={mailTo}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\n\ntype TodoInfoProps = {\n  todo: {\n    id: number,\n    title: string,\n    completed: boolean,\n    userId: number,\n    user: {\n      id: number,\n      name: string,\n      username: string,\n      email: string,\n    }\n  }\n};\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => {\n  const {\n    id, title, completed, user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      <UserInfo\n        user={user}\n      />\n\n    </article>\n  );\n};\n","import React from 'react';\n\nimport { TodoInfo } from '../TodoInfo';\n\ntype Todo = {\n  id: number,\n  title: string,\n  completed: boolean,\n  userId: number,\n  user: {\n    id: number,\n    name: string,\n    username: string,\n    email: string,\n  },\n};\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {todos.map(\n        todo => (\n          <TodoInfo\n            key={todo.id}\n            todo={todo}\n          />\n        ),\n      )}\n    </>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { useState } from 'react';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\ntype User = {\n  id: number,\n  name: string,\n  username: string,\n  email: string,\n};\n\ntype Todo = {\n  id: number,\n  title: string,\n  completed: boolean,\n  userId: number,\n  user: User,\n};\n\nfunction getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId) || {\n    id: 0,\n    name: '',\n    username: '',\n    email: '',\n  };\n}\n\nconst todos: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserById(todo.userId) || {\n    id: 0, name: '', username: '', email: '',\n  },\n}\n));\n\nexport const App = () => {\n  // #region states\n\n  const [currentTodos, setCurrentTodos] = useState<Todo[]>(todos);\n  const [currentUser, setCurrentUser] = useState(0);\n  const [selectedError, setSelectedUser] = useState(false);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  // #endregion\n  // #region functions\n\n  const addTodo = (newTodo: Todo) => {\n    if (newTodo) {\n      setCurrentTodos(curentTodos => [...curentTodos, newTodo]);\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setHasTitleError(!todoTitle);\n    setSelectedUser(!currentUser);\n\n    if (currentUser === 0 || !todoTitle) {\n      return;\n    }\n\n    addTodo({\n      id: Math.max(...currentTodos.map(todo => todo.id)) + 1,\n      title: todoTitle,\n      completed: false,\n      userId: currentUser,\n      user: getUserById(currentUser),\n    });\n\n    setCurrentUser(0);\n    setTodoTitle('');\n  };\n\n  // #endregion\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={todoTitle}\n            placeholder=\"enter your todo\"\n            onChange={(event) => {\n              setTodoTitle(event.target.value);\n              setHasTitleError(!event.target.value);\n            }}\n            onBlur={(event) => {\n              setHasTitleError(!event.target.value);\n            }}\n          />\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={currentUser}\n            onChange={(event) => {\n              setCurrentUser(+event.target.value);\n              setSelectedUser(!event.target.value);\n            }}\n          >\n            <option value=\"0\" disabled selected>Choose a user</option>\n            {usersFromServer.map(user => {\n              return (\n                <option\n                  value={user.id}\n                  key={user.id}\n                >\n                  {user.name}\n                </option>\n              );\n            })}\n          </select>\n          {selectedError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        todos={currentTodos}\n      />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}